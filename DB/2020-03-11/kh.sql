
CREATE TABLE DEPT_COPY
AS
SELECT * FROM DEPARTMENT;

SELECT * FROM DEPT_COPY;

--컬럼 추가
ALTER TABLE DEPT_COPY
ADD (KNAME VARCHAR2(20));

ALTER TABLE DEPT_COPY
ADD (HNAME VARCHAR2(20) DEFAULT 'kh');

--컬럼 수정
ALTER TABLE DEPT_COPY
MODIFY DEPT_ID CHAR(3)
MODIFY DEPT_TITLE VARCHAR2(40);

--제약조건 확인
SELECT 
    UC.CONSTRAINT_NAME, -- 제약조건 이름
    UC.CONSTRAINT_TYPE, -- 제약조건 타입
    UC.TABLE_NAME,      -- 테이블 이름
    UCC.COLUMN_NAME,    -- 컬럼 이름
    UC.SEARCH_CONDITION -- 제약조건 설명
FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC
ON (UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';  -- 테이블명은 반드시 대문자

--제약조건 추가
ALTER TABLE DEPT_COPY
ADD CONSTRAINT DCOPY_ID_PK PRIMARY KEY(DEPT_ID)
ADD CONSTRAINT DCOPY_TITLE_UNQ UNIQUE(DEPT_TITLE)
MODIFY HNAME CONSTRAINT DCOPY_HNAME_NN NOT NULL;

--컬럼 삭제
ALTER TABLE DEPT_COPY
DROP COLUMN KNAME;

--제약조건 삭제
ALTER TABLE DEPT_COPY
DROP CONSTRAINT DCOPY_ID_PK
DROP CONSTRAINT DCOPY_TITLE_UNQ
MODIFY HNAME NULL;

--컬럼 이름 변경
ALTER TABLE DEPT_COPY
RENAME COLUMN HNAME TO KHNAME;

SELECT * FROM DEPT_COPY;

--제약조건 이름 변경
ALTER TABLE DEPT_COPY
RENAME CONSTRAINT SYS_C007059 TO DCOPY_ID_NN;

--테이블 이름 변경
ALTER TABLE DEPT_COPY
RENAME TO ALTER_TEST;

SELECT * FROM ALTER_TEST;

--테이블 삭제
DROP TABLE ALTER_TEST;

CREATE TABLE EMP_01(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20)
);

--서브쿼리를 이용한 INSERT
INSERT INTO EMP_01(
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
);

SELECT * FROM EMP_01;

--서브쿼리를 이용하여 두개 테이블에 동시 INSERT
CREATE TABLE EMP_02
AS 
SELECT EMP_ID, EMP_NAME, DEPT_CODE
FROM EMPLOYEE WHERE 1=0;

CREATE TABLE EMP_03
AS 
SELECT EMP_ID, EMP_NAME, JOB_CODE
FROM EMPLOYEE WHERE 1=0;

INSERT ALL
INTO EMP_02 VALUES(EMP_ID, EMP_NAME, DEPT_CODE)
INTO EMP_03 VALUES(EMP_ID, EMP_NAME, JOB_CODE)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE WHERE SALARY > 3000000;

SELECT * FROM EMP_02;
SELECT * FROM EMP_03;

CREATE TABLE DEPT_COPY
AS
SELECT * FROM DEPARTMENT;

SELECT * FROM DEPT_COPY;
--인사관리부 -> 슈퍼갑
UPDATE DEPT_COPY
SET DEPT_TITLE = '슈퍼갑'
WHERE DEPT_ID = 'D1';

CREATE TABLE EMP_SALARY
AS
SELECT EMP_ID, EMP_NAME, SALARY, BONUS FROM EMPLOYEE;

SELECT SALARY, BONUS FROM EMP_SALARY WHERE EMP_ID = 204;
--월급 3400000, 보너스 0.2
UPDATE EMP_SALARY 
SET (SALARY, BONUS) = (
    SELECT SALARY, BONUS
    FROM EMP_SALARY
    WHERE EMP_ID = 204)
WHERE EMP_NAME = '방명수';

SELECT * FROM EMP_SALARY;

SELECT * FROM DEPT_COPY;
COMMIT;
DELETE FROM DEPT_COPY;
ROLLBACK;

TRUNCATE TABLE DEPT_COPY;

DROP TABLE DEPT_COPY;

--실습
CREATE TABLE RUNNINGMAN(
    NO NUMBER PRIMARY KEY,
    ID VARCHAR2(20) UNIQUE,
    PASS VARCHAR2(20) NOT NULL,
    NAME VARCHAR2(20) NOT NULL,
    NICKNAME VARCHAR2(20) UNIQUE,
    GENDER CHAR(1),
    TEL VARCHAR2(20) DEFAULT '010-0000-0000',
    ADDRESS VARCHAR2(90)
);

INSERT INTO RUNNINGMAN VALUES(
1, 'muhan', '1234', '유재석', '못생긴형', 'M', '010-4958-2333', '압구정');
INSERT INTO RUNNINGMAN VALUES(
2, 'bignose', '4444', '지석진', '지는해', 'M', DEFAULT, '서울');
INSERT INTO RUNNINGMAN VALUES(
3, 'tiger', '6658', '김종국', '안꼬', 'M', '010-6674-8986', '안양');
INSERT INTO RUNNINGMAN VALUES(
4, 'haha', '5356', '하하', '신분세탁', 'M', '010-8997-1122', '서래마을');
INSERT INTO RUNNINGMAN VALUES(
5, 'ace', '5555', '송지효', '천성임', 'F', DEFAULT, '서울시');
INSERT INTO RUNNINGMAN VALUES(
6, 'girrafe', '6658', '이광수', '중기친구', 'M', '010-2378-9991', '남양주');
INSERT INTO RUNNINGMAN VALUES(
7, 'ssapssap', '5356', '양세찬', '김종국팬', 'M', '010-1215-7777', '동두천');
INSERT INTO RUNNINGMAN VALUES(
8, 'doli', '5555', '전소민', '전두릅', 'F', DEFAULT, '일산');

--'중기친구'라는 닉네임을 가진 사람이 비밀번호를 변경하였다.
--6658 -> 9999
--UPDATE구문으로 비밀번호를 변경할 것. 단, NICKNAME 검색조건으로 사용
UPDATE RUNNINGMAN
SET PASS = '9999'
WHERE NICKNAME = '중기친구';

--전화번호가 기본값으로 되어있는 사원들의 정보를 '없음'으로 변경
--단, 1번의 쿼리문으로 모두 변경
UPDATE RUNNINGMAN
SET TEL = '없음'
WHERE TEL = '010-0000-0000';

--런닝맨 멤버 중 유재석이 하차했습니다.
--유재석을 테이블에서 삭제하여라
DELETE FROM RUNNINGMAN
WHERE NAME = '유재석';

--유재석이 하차한 뒤로 시청률이 떨어져서 프로그램이 폐지되었습니다...
--TRUNCATE를 통해서 모든 멤버의 정보를 초기화 하여라...
TRUNCATE TABLE RUNNINGMAN;

SELECT * FROM RUNNINGMAN;
COMMIT;
ROLLBACK;

SELECT 
    UC.CONSTRAINT_NAME, -- 제약조건 이름
    UC.CONSTRAINT_TYPE, -- 제약조건 타입
    UC.TABLE_NAME,      -- 테이블 이름
    UCC.COLUMN_NAME,    -- 컬럼 이름
    UC.SEARCH_CONDITION -- 제약조건 설명
FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC
ON (UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'RUNNINGMAN';

SELECT DATA_DEFAULT 
FROM ALL_TAB_COLS 
WHERE TABLE_NAME='RUNNINGMAN' AND COLUMN_NAME='TEL';
