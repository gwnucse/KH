
CREATE OR REPLACE VIEW EMP_VIEW
AS
SELECT EMP_ID, EMP_NAME, EMAIL, PHONE FROM EMPLOYEE;

CREATE OR REPLACE VIEW EMP_VIEW1
AS 
SELECT EMP_ID, EMAIL FROM EMPLOYEE;

CREATE TABLE EMP_COPY
AS
SELECT EMP_ID, EMP_NAME, EMAIL, PHONE FROM EMPLOYEE;

SELECT * FROM EMPLOYEE;
SELECT * FROM EMP_VIEW;
SELECT * FROM EMP_COPY;

UPDATE EMP_VIEW
SET PHONE = '01099999999'
WHERE EMP_ID = 200;

UPDATE EMPLOYEE
SET PHONE = '01000000000'
WHERE EMP_ID = 200;

ROLLBACK;

--SEQUENCE
CREATE SEQUENCE SEQ_ID
START WITH 100  -- 시작값 100
INCREMENT BY 1  -- 1씩 증가
MAXVALUE 1000   --최대값 1000
NOCYCLE         --1000이후에 증가하지 않고 에러 발생
NOCACHE;        --캐쉬 사용 안함

SELECT SEQ_ID.NEXTVAL, EMPLOYEE.* FROM EMPLOYEE;
SELECT SEQ_ID.CURRVAL FROM DUAL;


CREATE TABLE SEQ_TBL(
    MEMBER_NO NUMBER PRIMARY KEY,
    MEMBER_ID VARCHAR2(20) UNIQUE,
    MEMBER_PW VARCHAR2(30) NOT NULL
);

CREATE SEQUENCE SEQ_TEST
START WITH 1
INCREMENT BY 2
MAXVALUE 3
NOCYCLE
NOCACHE;

INSERT INTO SEQ_TBL VALUES(
    SEQ_TEST.NEXTVAL, 'user01', 'pass01');
INSERT INTO SEQ_TBL VALUES(
    SEQ_TEST.NEXTVAL, 'user02', 'pass02');
INSERT INTO SEQ_TBL VALUES(
    SEQ_TEST.NEXTVAL, 'user03', 'pass03');
INSERT INTO SEQ_TBL VALUES(
    SEQ_TEST.NEXTVAL, 'user04', 'pass04');
    
SELECT * FROM SEQ_TBL;
SELECT MAX(MEMBER_NO) FROM SEQ_TBL;

ALTER SEQUENCE SEQ_TEST
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;

DROP SEQUENCE SEQ_TEST;

--INDEX
CREATE INDEX EMP_IDD_NDD ON EMPLOYEE
(EMP_NAME, EMP_NO, HIRE_DATE);
DROP INDEX EMP_IDD_NDD;

SELECT EMP_NAME, EMP_NO, HIRE_DATE FROM EMPLOYEE;

--SYNONYM
--비공개 동의어
CREATE SYNONYM EMP FOR EMPLOYEE;
SELECT * FROM EMP;
DROP SYNONYM EMP;

--PL/SQL을 이용한 출력문을 출력하기 위한 설정
SET SERVEROUTPUT ON;

BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
    DBMS_OUTPUT.PUT_LINE('HELLO ORACLE');
END;
/

DECLARE
    MSG VARCHAR2(20);
BEGIN
    MSG := '&입력';
    DBMS_OUTPUT.PUT_LINE(MSG);
END;
/

DECLARE
    NAME VARCHAR2(9);
    SAL NUMBER;
BEGIN
    SELECT EMP_NAME, SALARY
    INTO NAME, SAL
    FROM EMPLOYEE
    WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('이름 : '||NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : '||SAL);
END;
/

--해당 사원의 사원번호 입력시 이름, 부서코드, 직급코드 출력
SELECT * FROM EMPLOYEE;

DECLARE
    NAME VARCHAR(9);
    DEPT VARCHAR(3);
    JOB VARCHAR(3);
BEGIN
    SELECT EMP_NAME, DEPT_CODE, JOB_CODE
    INTO NAME, DEPT, JOB
    FROM EMPLOYEE
    WHERE EMP_ID = &사원번호;
    DBMS_OUTPUT.PUT_LINE('이름 : '||NAME);
    DBMS_OUTPUT.PUT_LINE('부서코드 : '||DEPT);
    DBMS_OUTPUT.PUT_LINE('직급코드 : '||JOB);
END;
/

--해당 사원의 사원번호 입력시 이름, 부서명, 직급명 출력
SELECT * FROM DEPARTMENT;
SELECT * FROM JOB;
DECLARE
    EMP_NAME VARCHAR(9);
    DEPT_NAME VARCHAR(30);
    JOB_NAME VARCHAR(30);
BEGIN
    SELECT EMP_NAME, DEPT_TITLE, JOB_NAME
    INTO EMP_NAME, DEPT_NAME, JOB_NAME
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    LEFT JOIN JOB USING(JOB_CODE)
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름 : '||EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('부서코드 : '||DEPT_NAME);
    DBMS_OUTPUT.PUT_LINE('직급코드 : '||JOB_NAME);
END;
/

--상수
DECLARE
    NO1 NUMBER := 10;
    NO2 CONSTANT NUMBER := 20;
BEGIN
    NO1 := 100;
    DBMS_OUTPUT.PUT_LINE(NO1);
    DBMS_OUTPUT.PUT_LINE(NO2);
END;
/

--%TYPE
SELECT * FROM DEPARTMENT;
SELECT * FROM JOB;
DECLARE
    EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
    DEPT_NAME DEPARTMENT.DEPT_TITLE%TYPE;
    JOB_NAME JOB.JOB_NAME%TYPE;
BEGIN
    SELECT EMP_NAME, DEPT_TITLE, JOB_NAME
    INTO EMP_NAME, DEPT_NAME, JOB_NAME
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    LEFT JOIN JOB USING(JOB_CODE)
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름 : '||EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('부서코드 : '||DEPT_NAME);
    DBMS_OUTPUT.PUT_LINE('직급코드 : '||JOB_NAME);
END;
/

--사번을 입력받아서 이름, 주민등록번호, 이메일, 급여 출력
DECLARE
    NAME EMPLOYEE.EMP_NAME%TYPE;
    NO EMPLOYEE.EMP_NO%TYPE;
    EMAIL EMPLOYEE.EMAIL%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT EMP_NAME, EMP_NO, EMAIL, SALARY
    INTO NAME, NO, EMAIL, SAL
    FROM EMPLOYEE
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름 : '||NAME);
    DBMS_OUTPUT.PUT_LINE('주민등록번호 : '||NO);
    DBMS_OUTPUT.PUT_LINE('EMAIL : '||EMAIL);
    DBMS_OUTPUT.PUT_LINE('급여 : '||SAL);
END;
/

--ROWTYPE
DECLARE
    MYROW EMPLOYEE%ROWTYPE;
BEGIN
    SELECT EMP_NAME, EMP_NO, EMAIL, SALARY
    INTO MYROW.EMP_NAME, MYROW.EMP_NO, MYROW.EMAIL, MYROW.SALARY
    FROM EMPLOYEE
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름 : '||MYROW.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('주민등록번호 : '||MYROW.EMP_NO);
    DBMS_OUTPUT.PUT_LINE('EMAIL : '||MYROW.EMAIL);
    DBMS_OUTPUT.PUT_LINE('급여 : '||MYROW.SALARY);
END;
/

--RECORD
DECLARE
    TYPE MY_RECORD IS RECORD(
        MY_NAME EMPLOYEE.EMP_NAME%TYPE,
        MY_NO EMPLOYEE.EMP_NO%TYPE,
        MY_EMAIL EMPLOYEE.EMAIL%TYPE,
        MY_SAL EMPLOYEE.SALARY%TYPE
    );
    MYREC MY_RECORD;
BEGIN
    SELECT EMP_NAME, EMP_NO, EMAIL, SALARY
    INTO MYREC
    FROM EMPLOYEE
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름 : '||MYREC.MY_NAME);
    DBMS_OUTPUT.PUT_LINE('주민등록번호 : '||MYREC.MY_NO);
    DBMS_OUTPUT.PUT_LINE('EMAIL : '||MYREC.MY_EMAIL);
    DBMS_OUTPUT.PUT_LINE('급여 : '||MYREC.MY_SAL);
END;
/

--@실습문제1
--사번, 사원명, 직급코드, 급여를 담을수 있는 참조변수를 통해서 (%TYPE)
--송종기사원의 사번, 사원명, 직급코드,급여를 익명블럭을 통해 스크립트 출력하세요.
DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    DEPT_C EMPLOYEE.DEPT_CODE%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
    INTO ID, NAME, DEPT_C, SAL
    FROM EMPLOYEE
    WHERE EMP_ID = &사번;
    DBMS_OUTPUT.PUT_LINE('사번 : '||ID);
    DBMS_OUTPUT.PUT_LINE('이름 : '||NAME);
    DBMS_OUTPUT.PUT_LINE('직급코드 : '||DEPT_C);
    DBMS_OUTPUT.PUT_LINE('급여 : '||SAL);
END;
/

--@실습문제2
--사번, 사원명, 부서명,직급명을 담을수 있는 참조변수를 통해서 (record)
-- 사원명을 검색하여 해당 사원의 사번, 사원명, 부서명,직급명을 
-- 익명블럭을 통해 스크립트 출력하세요.
DECLARE
    TYPE EMP IS RECORD(
        ID EMPLOYEE.EMP_ID%TYPE,
        NAME EMPLOYEE.EMP_NAME%TYPE,
        DEPT_N DEPARTMENT.DEPT_TITLE%TYPE,
        JOB_N JOB.JOB_NAME%TYPE
    );
    EMP_INFO EMP;
BEGIN
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME
    INTO EMP_INFO
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    LEFT JOIN JOB USING(JOB_CODE)
    WHERE EMP_ID = &사번;
    DBMS_OUTPUT.PUT_LINE('사번 : '||EMP_INFO.ID);
    DBMS_OUTPUT.PUT_LINE('이름 : '||EMP_INFO.NAME);
    DBMS_OUTPUT.PUT_LINE('직급코드 : '||EMP_INFO.DEPT_N);
    DBMS_OUTPUT.PUT_LINE('급여 : '||EMP_INFO.JOB_N);
END;
/

--@실습문제3
-- 사원번호를 입력하여 해당 사원을 찾아  (%ROWTYPE을 사용)
-- 사원명, 주민번호, 입사일, 부서명을 
-- 익명블럭을 통해 스크립트 출력하세요.
SELECT * FROM EMPLOYEE;
DECLARE
    EMP EMPLOYEE%ROWTYPE;
    DEPT DEPARTMENT%ROWTYPE;
BEGIN
    SELECT EMP_NAME, EMP_NO, HIRE_DATE, DEPT_TITLE
    INTO EMP.EMP_NAME, EMP.EMP_NO, EMP.HIRE_DATE, DEPT.DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    WHERE EMP_ID = &사번;
    DBMS_OUTPUT.PUT_LINE('이름 : '||EMP.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('주민번호 : '||EMP.EMP_NO);
    DBMS_OUTPUT.PUT_LINE('입사일 : '||EMP.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE('부서명 : '||DEPT.DEPT_TITLE);
END;
/

CREATE TABLE COPY_EMP
AS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE;

CREATE TABLE DEL_EMP
AS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE
WHERE 1 = 0;

SELECT * FROM COPY_EMP;
SELECT * FROM DEL_EMP;

DECLARE
    C_EMP COPY_EMP%ROWTYPE;
BEGIN
    SELECT *
    INTO C_EMP
    FROM COPY_EMP
    WHERE EMP_NAME = '&이름';
    
    DELETE FROM COPY_EMP
    WHERE EMP_NAME = C_EMP.EMP_NAME;
    
    INSERT INTO DEL_EMP VALUES(
        C_EMP.EMP_ID, C_EMP.EMP_NAME, C_EMP.DEPT_CODE, C_EMP.JOB_CODE);
    
    COMMIT;
END;
/

DECLARE
    E_ID EMPLOYEE.EMP_ID%TYPE;
    E_NAME EMPLOYEE.EMP_NAME%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
    BONUS EMPLOYEE.BONUS%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS, 0)
    INTO E_ID, E_NAME, SAL, BONUS
    FROM EMPLOYEE
    WHERE EMP_ID = &사번;

    DBMS_OUTPUT.PUT_LINE('사번 : '||E_ID);
    DBMS_OUTPUT.PUT_LINE('이름 : '||E_NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : '||SAL);
    DBMS_OUTPUT.PUT_LINE('보너스율 : '||BONUS * 100||'%');
    
    IF (BONUS = 0)
    THEN 
        DBMS_OUTPUT.PUT_LINE('보너스를 받지 않는 사원입니다');
    END IF;
END;
/

DECLARE
    E_ID EMPLOYEE.EMP_ID%TYPE;
    E_NAME EMPLOYEE.EMP_NAME%TYPE;
    J_CODE EMPLOYEE.JOB_CODE%TYPE;
    J_NAME JOB.JOB_NAME%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
    INTO E_ID, E_NAME, J_CODE, J_NAME
    FROM EMPLOYEE
    LEFT JOIN JOB USING(JOB_CODE)
    WHERE EMP_ID = &사번;
    
    DBMS_OUTPUT.PUT_LINE('사번 : ' || E_ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || E_NAME);
    DBMS_OUTPUT.PUT_LINE('직급코드 : ' || J_CODE);
    DBMS_OUTPUT.PUT_LINE('직급 : ' || J_NAME);
    
    IF (J_CODE IN('J1', 'J2'))
    THEN
        DBMS_OUTPUT.PUT_LINE('임원진입니다.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('가족입니다.');
    END IF;
END;
/

--사원번호를 가지고 사원을 조회하여 사원명과 부서명을 출력
--부서가 없는 사원이면 '부서가 없는 사원입니다.'
--부서가 있으면 부서명을 출력
DECLARE
    E_NAME EMPLOYEE.EMP_NAME%TYPE;
    D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
BEGIN
    SELECT EMP_NAME, DEPT_TITLE
    INTO E_NAME, D_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    WHERE EMP_ID = &사번;
    
    DBMS_OUTPUT.PUT_LINE('이름 : ' || E_NAME);
    
    IF (D_TITLE IS NULL)
    THEN
        DBMS_OUTPUT.PUT_LINE('부서가 없는 사원입니다');
    ELSE
        DBMS_OUTPUT.PUT_LINE('부서명 : ' || D_TITLE);
    END IF;
END;
/

--사번을 입력받은 후 급여를 확인하여 등급을 출력
--0 ~ 99만원 : F
--100 ~ 199만원 : E
--200 ~ 299만원 : D
--300 ~ 399만원 : C
--400 ~ 499만원 : B
--500만원 이상 : A
DECLARE
    E_NAME EMPLOYEE.EMP_NAME%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
    GRADE VARCHAR2(2);
BEGIN
    SELECT EMP_NAME, SALARY
    INTO E_NAME, SAL
    FROM EMPLOYEE
    WHERE EMP_ID = &사번;
    
    DBMS_OUTPUT.PUT_LINE('이름 : ' || E_NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SAL);
    SAL := SAL / 10000;
    
    IF (SAL >= 500)
    THEN
        GRADE := 'A';
    ELSIF (SAL >= 400)
    THEN
        GRADE := 'B';
    ELSIF (SAL >= 300)
    THEN
        GRADE := 'C';
    ELSIF (SAL >= 200)
    THEN
        GRADE := 'D';
    ELSIF (SAL >= 100)
    THEN
        GRADE := 'E';
    ELSE
        GRADE := 'F';
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('등급 : '||GRADE);
END;
/

DECLARE
    INPUTNUM NUMBER;
BEGIN
    INPUTNUM := &숫자;
    
    CASE INPUTNUM
        WHEN 1 THEN DBMS_OUTPUT.PUT_LINE('1을 입력하셨습니다.');
        WHEN 2 THEN DBMS_OUTPUT.PUT_LINE('2를 입력하셨습니다.');
        WHEN 3 THEN DBMS_OUTPUT.PUT_LINE('3을 입력하셨습니다.');
        ELSE DBMS_OUTPUT.PUT_LINE('1, 2, 3이 아닙니다.');
    END CASE;
END;
/

DECLARE
    E_NAME EMPLOYEE.EMP_NAME%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
    GRADE VARCHAR2(2);
BEGIN
    SELECT EMP_NAME, SALARY
    INTO E_NAME, SAL
    FROM EMPLOYEE
    WHERE EMP_ID = &사번;
    
    DBMS_OUTPUT.PUT_LINE('이름 : ' || E_NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SAL);
    SAL := SAL / 1000000;
    
    CASE FLOOR(SAL)
        WHEN 0 THEN GRADE := 'F';
        WHEN 1 THEN GRADE := 'E';
        WHEN 2 THEN GRADE := 'D';
        WHEN 3 THEN GRADE := 'C';
        WHEN 4 THEN GRADE := 'B';
        ELSE GRADE := 'A';
    END CASE;
    
    DBMS_OUTPUT.PUT_LINE('등급 : '||GRADE);
END;
/
